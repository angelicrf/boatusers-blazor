@page "/cart"
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject IBoatsProducts boatProduct

<h5>Items in Cart:</h5>

<div class="container row">

    @if (BoatCartItems.Any())
    {

        foreach (var item in BoatCartItems)
        {
            Total += item.AccessoryPrice;
            <div class="mt-5 col">
                <div class="card" style="width: 18rem;">
                    <img src=@item.AccessoryImgSrc class="card-img-top" alt=@item.AccessoryName>
                    <div class="card-body">
                        <h5 class="card-title">@item.AccessoryName</h5>
                        <p class="card-text">@item.AccessoryDesc</p>
                        <p class="card-text">@item.AccessoryPrice</p>
                    </div>
                </div>
            </div>
        }

        <div class="bg-light w-100 h-100 mt-3 border border-3 rounded" style="height:50rem;">
            <div class="mt-4 mb-4 fw-bold fs-5 p-3">Ready to Pay @Math.Round(Total,2)</div>
            <div class="m-auto" style="width:30rem;">

                <div class="mt-2" id="paypal-purchase"></div>

            </div>
        </div>
    }
</div>
@code {

    public ElementReference payElement;
    public IJSObjectReference? payModule;
    public IJSObjectReference? payInstance;

    private List<BoatAccesssoriesModel> BoatCartItems;
    private double Total { get; set; } = 0.0;
    protected override async Task OnInitializedAsync()
    {

        BoatCartItems = await boatProduct.GetBoatAccessoryCartListAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            payModule = await JS.InvokeAsync<IJSObjectReference>(
            "import", "./_content/BoatRazorLibrary/cartInfo.js");
            payInstance = await payModule.InvokeAsync<IJSObjectReference>(
            "payPalBtn", Math.Round(Total, 2));
        }
    }


    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (payInstance is not null)
        {
            await payInstance.DisposeAsync();
        }

        if (payModule is not null)
        {
            await payModule.DisposeAsync();
        }
    }
}
