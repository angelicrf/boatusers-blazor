@using Newtonsoft.Json;
@implements IDisposable


@if (instance.IsBatteryEventFired)
{

    <div>@message</div>
    <div class="m-auto">
        <div class="row mt-3">
            <button class="btn btn-info" @onclick="() => { DeviceInfoClicked(); }">Device Info</button>
        </div>
        <div class="row mt-3">
            <button class="btn btn-danger" @onclick="instance.DriveToNewLocation">Device Map</button>
        </div>

    </div>
    if (isDeviceInfo)
    {

        <div class="mb-2 fw-bold text-info"> App Name: <span class="text-danger"> @instance.name</span></div>
        <div class="mt-3 mb-2 fw-bold text-info"> App package: <span class="text-danger">Application Package: @instance.package</span></div>
        <div class="mb-2 fw-bold text-info"> App Version: <span class="text-danger">Application Version: @instance.version</span></div>
        <div class="mt-3 fw-bold text-info"> App Build: <span class="text-danger">Application Build: @instance.build</span></div>
        <div class="mt-3 mb-2 fw-bold text-info"> Device Battery: <span class="text-danger">@instance.BatteryLevel</span></div>
        <div class="mt-3 mb-2 fw-bold text-info">Network Type: <span class="text-danger">@instance.ConnectionMethod</span></div>
    }

    if (!string.IsNullOrEmpty(UserLocation))
    {
        <div class="mt-3 mb-2 bg-info row text-center" style="height:25px;">Telemtry Report:</div>
        <div class="mt-3 mb-2 fw-bold text-info"> User Location: <span class="text-danger"> @ThisCount: @UserLocation</span></div>
    }

    if (!string.IsNullOrEmpty(instance.DevicePressureLevel))
    {

        <div class="mt-3 mb-2 fw-bold text-info"> Device Pressure: <span class="text-danger">@ThisCount: @instance.DevicePressureLevel</span></div>
    }

}
else
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
<div>@UserLocationData.Latitude @UserLocationData.Longitude</div>
@code {

    //26.609859 -80.058571
    DeviceSensors instance = new DeviceSensors();

    private bool isDeviceLocation { get; set; } = false;

    private bool isDeviceInfo { get; set; } = false;

    private bool isDeviceBattery { get; set; } = false;

    private bool isDeviceBarometer { get; set; } = false;

    private object ThisObject { get; set; }

    private int ThisCount { get; set; }

    private string UserLocation { get; set; }

    PeriodicTimer periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(5));


    private MauiDeviceLocationModel UserLocationData = new MauiDeviceLocationModel();
    private string? message;

    private void ParentShowMessage(MouseEventArgs e)
    {
        message = $"From Parent Component To Set Event in Child Component! ({e.ScreenX}:{e.ScreenY})";
    }
    private void DeviceInfoClicked()
    {

        isDeviceInfo = !isDeviceInfo;

        if (isDeviceLocation) { isDeviceLocation = false; }

        if (isDeviceBarometer) { isDeviceBarometer = false; }

        if (isDeviceBattery) { isDeviceBattery = false; }

    }

    private Task<bool> CallFunc()
    {

        var UserDataString = JsonConvert.SerializeObject(ThisObject);
        UserLocationData = JsonConvert.DeserializeObject<MauiDeviceLocationModel>(UserDataString);
        if (UserLocationData?.Longitude != 0.2)
        {
            return Task.FromResult(true);
        }
        return Task.FromResult(false);

    }
    protected override async Task OnInitializedAsync()
    {
        ThisObject = await instance.GetCurrentLocation();
        await instance.WatchBattery();
        await instance.ToggleBarometer();
        await instance.DeviceConnetNetwork();
        await instance.VerifyPermission();
        await InvokeAsync(StateHasChanged);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {

            while (await periodicTimer.WaitForNextTickAsync())
            {

                var receiveLocation = await CallFunc();
                if (receiveLocation)
                {
                    UserLocation = await instance.GetGeocodeReverseData(UserLocationData.Latitude, UserLocationData.Longitude);

                }
                await instance.ToggleBarometer();
                ThisCount++;
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    public void Dispose() => periodicTimer?.Dispose();
}
