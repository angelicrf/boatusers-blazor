@using Newtonsoft.Json;
@implements IDisposable

<div class="m-auto">
    <div class="row mt-3">
        <button class="btn btn-info" @onclick="() => DeviceInfoClicked()">Device Info</button>
    </div>
    <div class="row mt-3">
        <button class="btn btn-danger" @onclick="() => instance.DriveToNewLocation()">Device Map</button>
    </div>
    <div class="row mt-3">
        <button class="btn btn-primary" @onclick="() => { CallFunc(); CallLocation(); }">Device Location</button>
    </div>
    <div class="row mt-3">
        <button class="btn btn-info" @onclick="() => { DeviceBatteryClicked(); }">Device Battery</button>
    </div>

</div>
@if (isDeviceInfo)
{
    <div class="mb-2 fw-bold text-info"> App Name: <span class="text-danger"> @instance.name</span></div>
    <div class="mt-3 mb-2 fw-bold text-info"> App package: <span class="text-danger">Application Package: @instance.package</span></div>
    <div class="mb-2 fw-bold text-info"> App Version: <span class="text-danger">Application Version: @instance.version</span></div>
    <div class="mt-3 fw-bold text-info"> App Build: <span class="text-danger">Application Build: @instance.build</span></div>
}

@if (ThisObject != null && isDeviceLocation)
{
    <div class="mt-3 mb-2 fw-bold text-info"> User Location: <span class="text-danger">@UserLocationData.Latitude and  @UserLocationData.Longitude</span></div>
}

@if (!string.IsNullOrEmpty(instance.BatteryLevel) && isDeviceBattery)
{
    <div class="mt-3 mb-2 fw-bold text-info"> Device Battery: <span class="text-danger">@instance.BatteryLevel</span></div>

}
@if (!string.IsNullOrEmpty(instance.DevicePressureLevel))
{

   <div class="mt-3 mb-2 fw-bold text-info"> Device Pressure: <span class="text-danger">Crash Updates Telemetry is @instance.DevicePressureLevel and @ThisCount</span></div>
}
@code {

    DeviceSensors instance = new DeviceSensors();

    private bool isDeviceLocation { get; set; } = false;

    private bool isDeviceInfo { get; set; } = false;

    private bool isDeviceBattery { get; set; } = false;

    private bool isDeviceBarometer { get; set; } = false;

    private object ThisObject { get; set; }

    private int ThisCount { get; set; }
    PeriodicTimer periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(20));


    private MauiDeviceLocationModel UserLocationData = new MauiDeviceLocationModel();

    private void CallLocation()
    {

        isDeviceLocation = !isDeviceLocation;

        if (isDeviceInfo) { isDeviceInfo = false; }

        if (isDeviceBarometer) { isDeviceBarometer = false; }

        if (isDeviceBattery) { isDeviceBattery = false; }

    }

    private void DeviceInfoClicked()
    {

        isDeviceInfo = !isDeviceInfo;

        if (isDeviceLocation) { isDeviceLocation = false; }

        if (isDeviceBarometer) { isDeviceBarometer = false; }

        if (isDeviceBattery) { isDeviceBattery = false; }

    }

    private void DeviceBatteryClicked()
    {

        isDeviceBattery = !isDeviceBattery;

        if (isDeviceLocation) { isDeviceLocation = false; }

        if (isDeviceInfo) { isDeviceInfo = false; }

        if (isDeviceBarometer) { isDeviceBarometer = false; }
    }
    //private void DeviceBarometerClicked()
    //{

    //    isDeviceBarometer = !isDeviceBarometer;

    //    if (isDeviceLocation) { isDeviceLocation = false; }

    //    if (isDeviceInfo) { isDeviceInfo = false; }

    //    if (isDeviceBattery) { isDeviceBattery = false; }
    //}

    private void CallFunc()
    {

        var UserDataString = JsonConvert.SerializeObject(ThisObject);
        UserLocationData = JsonConvert.DeserializeObject<MauiDeviceLocationModel>(UserDataString);

    }
    protected override async Task OnInitializedAsync()
    {
        ThisObject = await instance.GetCurrentLocation();
        instance.WatchBattery();
        instance.ToggleBarometer();
        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            while (await periodicTimer.WaitForNextTickAsync())
            {
                instance.ToggleBarometer();
                //await Task.Delay(10000);
                ThisCount++;
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    public void Dispose() => periodicTimer?.Dispose();
}
