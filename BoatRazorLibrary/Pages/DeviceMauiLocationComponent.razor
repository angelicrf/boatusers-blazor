@using Newtonsoft.Json;
@implements IDisposable

<div class="m-auto">
    <div class="row mt-3">
        <button class="btn btn-info" @onclick="async() => { if (!isDeviceInfo) { await Task.Delay(3500); }; DeviceInfoClicked(); }">Device Info</button>
    </div>
    <div class="row mt-3">
        <button class="btn btn-danger" @onclick="() => instance.DriveToNewLocation()">Device Map</button>
    </div>

</div>
@if (isDeviceInfo)
{

    <div class="mb-2 fw-bold text-info"> App Name: <span class="text-danger"> @instance.name</span></div>
    <div class="mt-3 mb-2 fw-bold text-info"> App package: <span class="text-danger">Application Package: @instance.package</span></div>
    <div class="mb-2 fw-bold text-info"> App Version: <span class="text-danger">Application Version: @instance.version</span></div>
    <div class="mt-3 fw-bold text-info"> App Build: <span class="text-danger">Application Build: @instance.build</span></div>
    <div class="mt-3 mb-2 fw-bold text-info"> Device Battery: <span class="text-danger">@instance.BatteryLevel</span></div>
}

@if (!string.IsNullOrEmpty(UserLocation))
{
    <div class="mt-3 mb-2 fw-bold text-info"> User Location Telemetry: <span class="text-danger">@UserLocation</span></div>
}

@if (!string.IsNullOrEmpty(instance.DevicePressureLevel))
{

    <div class="mt-3 mb-2 fw-bold text-info"> Device Pressure: <span class="text-danger">Crash Telemetry @instance.DevicePressureLevel and @ThisCount</span></div>
}
@code {

    DeviceSensors instance = new DeviceSensors();

    private bool isDeviceLocation { get; set; } = false;

    private bool isDeviceInfo { get; set; } = false;

    private bool isDeviceBattery { get; set; } = false;

    private bool isDeviceBarometer { get; set; } = false;

    private object ThisObject { get; set; }

    private int ThisCount { get; set; }

    private string UserLocation { get; set; }

    PeriodicTimer periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(5));


    private MauiDeviceLocationModel UserLocationData = new MauiDeviceLocationModel();

    private void DeviceInfoClicked()
    {

        isDeviceInfo = !isDeviceInfo;

        if (isDeviceLocation) { isDeviceLocation = false; }

        if (isDeviceBarometer) { isDeviceBarometer = false; }

        if (isDeviceBattery) { isDeviceBattery = false; }

    }


    private void CallFunc()
    {

        var UserDataString = JsonConvert.SerializeObject(ThisObject);
        UserLocationData = JsonConvert.DeserializeObject<MauiDeviceLocationModel>(UserDataString);

    }
    protected override async Task OnInitializedAsync()
    {
        ThisObject = await instance.GetCurrentLocation();
        instance.WatchBattery();
        instance.ToggleBarometer();
        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {

            while (await periodicTimer.WaitForNextTickAsync())
            {
                CallFunc();
                UserLocation = await instance.GetGeocodeReverseData(UserLocationData.Latitude, UserLocationData.Longitude);

                instance.ToggleBarometer();
                ThisCount++;
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    public void Dispose() => periodicTimer?.Dispose();
}
