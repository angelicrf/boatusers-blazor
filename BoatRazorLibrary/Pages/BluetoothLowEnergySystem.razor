
<div class="container">

    <button id="btScan" class="btn btn-danger mt-4" @onclick="ScanBledevices">Scan Bluetooth Devices</button>
    <button id="btScan" class="btn btn-info mt-4" @onclick="ConnectBledevice">Connect Device</button>

    @if (BluetoothLowEnergyDevicesModel.DeviceRemove.Any())
    {
        foreach (var item in BluetoothLowEnergyDevicesModel.DeviceRemove)
        {
            <div>Bluetooth Device Remve: @item.Value</div>
        }

    }
    @if (BluetoothLowEnergyDevicesModel.DevicesInfo.Any())
    {
        foreach (var item in BluetoothLowEnergyDevicesModel.DevicesInfo)
        {
            <div>Bluetooth Device Info: @item.Value</div>
        }

    }
    @if (!string.IsNullOrEmpty(BluetoothLowEnergyDevicesModel.DeviceWatchStop))
    {

        <div>Bluetooth Device Watch: @BluetoothLowEnergyDevicesModel.DeviceWatchStop</div>
    }
    @if (!string.IsNullOrEmpty(BluetoothLowEnergyDevicesModel.DeviceEnumComplete))
    {

        <div>Bluetooth Device Complete: @BluetoothLowEnergyDevicesModel.DeviceEnumComplete</div>
    }
    @if (BluetoothLowEnergyDevicesModel.DeviceInfo.Any() && !IsCheckedInfo)
    {
        foreach (var item in BluetoothLowEnergyDevicesModel.DeviceInfo)
        {
            if (!string.IsNullOrEmpty(item.Key.ToString()))
            {
                if (item.Key == "System.Devices.Aep.DeviceAddress")
                {
                    <div>Device Address: @item.Key: @item.Value</div>
                }
                if (item.Key == "System.Devices.Aep.IsPaired")
                {
                    BluetoothLowEnergyDevicesModel.DeviceIsPair = item.Value.ToString();
                    <div>Device Is Paired: @item.Key: @item.Value</div>
                }
                if (item.Key == "System.Devices.Aep.CanPair")
                {
                    BluetoothLowEnergyDevicesModel.DeviceCanPair = item.Value.ToString();
                    <div>Device Is Connected: @item.Key: @item.Value</div>
                    IsCheckedInfo = true;
                }
            }
        }
    }

    @*@if (!string.IsNullOrEmpty(BluetoothLowEnergyDevicesModel.BluetoothDId))
        {
            <div>Bluetooth Device ID: @BluetoothLowEnergyDevicesModel.BluetoothDId</div>
        }

        @if (IsCheckedInfo && !string.IsNullOrEmpty(BluetoothLowEnergyDevicesModel.DeviceIsPair))
        {
            <div>Pairing Status: @BluetoothLowEnergyDevicesModel.DeviceIsPair</div>
        }*@
    @if (!string.IsNullOrEmpty(BluetoothLowEnergyDevicesModel.DeviceIsConnected))
    {
        <div>Connection Status: @BluetoothLowEnergyDevicesModel.DeviceIsConnected</div>
    }
    @if (BluetoothLowEnergyDevicesModel.ServicesUUID.Any())
    {
        <h2>Services</h2>
        foreach (var item in BluetoothLowEnergyDevicesModel.ServicesUUID.Distinct().ToList())
        {
            <br />
            <button class="btn btn-primary" @onclick="() => ServiceClicked(item)">@item</button><br />

            if (ThisGuidService == item)
            {
                if (BluetoothLowEnergyDevicesModel.CharacteristicsUUID.Any())
                {
                    <h2>Characteristics</h2>

                    foreach (var bleChar in BluetoothLowEnergyDevicesModel.CharacteristicsUUID)
                    {
                        <button class="btn btn-info" @onclick="() => EvaluteCharac(bleChar)">@bleChar</button><br />

                        if (BluetoothLowEnergyDevicesModel.ThisGuidCharc == bleChar)
                        {
                            if (BluetoothLowEnergyDevicesModel.IsCharcReadable)
                            {
                               <div><button class="btn btn-danger" @onclick="() => ReadCharac(bleChar)">Read</button></div>
                            }
                            if (BluetoothLowEnergyDevicesModel.IsCharcWritable)
                            {
                               <div><button class="btn btn-danger" @onclick="() => WriteCharac(bleChar)">Write</button></div>
                            }
                            if (BluetoothLowEnergyDevicesModel.IsCharcWritableWithoutResponse)
                            {
                               <div><button class="btn btn-danger" @onclick="() => WriteWithoutResponseCharac(bleChar)">Write Without Response</button></div>
                            }
                            else if(!BluetoothLowEnergyDevicesModel.IsCharcWritableWithoutResponse && !BluetoothLowEnergyDevicesModel.IsCharcWritable && !BluetoothLowEnergyDevicesModel.IsCharcReadable)
                            {
                                <div class="text-danger">This Charcteristic has No Ability</div>
                            }
                        }
                    }
                }
                else
                {
                    <div class="text-secondary">No Characteristic</div>
                }
            }

        }
    }

</div>
@code {
    private BluetoothLowEnergyDevicesModel bluetoothLowEnergyDevicesModel = new BluetoothLowEnergyDevicesModel();

    private bool IsCheckedInfo { get; set; } = false;

    private bool IsServiceClicked { get; set; } = false;

    private bool IsCharcClicked { get; set; } = false;

    private bool IsReadCharac { get; set; } = false;

    private bool IsWriteCharac { get; set; } = false;

    private bool IsWriteWithoutResponseCharac { get; set; } = false;

    private Guid ThisGuidService { get; set; }


    private async void ScanBledevices()
    {
        IsCheckedInfo = false;

        await bluetoothLowEnergyDevicesModel.RunScanDevice();

        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await bluetoothLowEnergyDevicesModel.RunScanDevice();

        }
    }
    //    protected override async Task OnInitializedAsync()
    //{
    //    base.OnInitializedAsync();
    //    await bluetoothLowEnergyDevicesModel.RunScanDevice();
    //}
    private async Task ConnectBledevice()
    {

        await bluetoothLowEnergyDevicesModel.RunConnectDevice();
        StateHasChanged();
        //BluetoothLE#BluetoothLEf8:b5:4d:66:a3:4f-64:6a:9d:44:66:9b
        //0d54daa9-3114-528d-8dda-dc6934f39ed5

    }
    private async Task ServiceClicked(Guid thisGuid)
    {

        IsServiceClicked = true;

        BluetoothLowEnergyDevicesModel.CharacteristicsUUID = new List<Guid>();

        ThisGuidService = thisGuid;

        BluetoothLowEnergyDevicesModel.DeviceGuid = thisGuid;

        if (IsServiceClicked)
        {

            if (BluetoothLowEnergyDevicesModel.DeviceGuid != Guid.Empty)
            {
                await bluetoothLowEnergyDevicesModel.ShowDeviceCharcteristics();

                IsServiceClicked = false;
            }
        }
    }
    private void EvaluteCharac(Guid thisCharac)
    {
        IsCharcClicked = true;

        BluetoothLowEnergyDevicesModel.ThisGuidCharc = thisCharac;

        bluetoothLowEnergyDevicesModel.CharcteristicAbilities(thisCharac);
    }
    private async Task ReadCharac(Guid thisCharac)
    {
        IsReadCharac = true;

        BluetoothLowEnergyDevicesModel. ThisGuidCharc = thisCharac;

        await bluetoothLowEnergyDevicesModel.ReadDeviceCharcteristic(thisCharac);

    }
    private async Task WriteCharac(Guid thisCharac)
    {
        IsWriteCharac = true;

        BluetoothLowEnergyDevicesModel.ThisGuidCharc = thisCharac;

        await bluetoothLowEnergyDevicesModel.ReadDeviceCharcteristic(thisCharac);

    }
    private async Task WriteWithoutResponseCharac(Guid thisCharac)
    {
        IsWriteWithoutResponseCharac = true;

        BluetoothLowEnergyDevicesModel.ThisGuidCharc = thisCharac;

        await bluetoothLowEnergyDevicesModel.WriteWithoutResponseDeviceCharcteristic(thisCharac);

    }
}