
<div class="container">

    <button id="btScan" class="btn btn-danger mt-4" @onclick="blePageCode.ScanBledevices">Scan Bluetooth Devices</button>
    <button id="btScan" class="btn btn-info mt-4" @onclick="blePageCode.ConnectBledevice">Connect Device</button>

    @if (BluetoothLowEnergyDevicesModel.DeviceRemove.Any())
    {
        foreach (var item in BluetoothLowEnergyDevicesModel.DeviceRemove)
        {
            <div>Bluetooth Device Remve: @item.Value</div>
        }

    }
    @if (BluetoothLowEnergyDevicesModel.DevicesInfo.Any())
    {
        foreach (var item in BluetoothLowEnergyDevicesModel.DevicesInfo)
        {
            <div>Bluetooth Device Info: @item.Value</div>
        }

    }
    @if (!string.IsNullOrEmpty(BluetoothLowEnergyDevicesModel.DeviceWatchStop))
    {

        <div>Bluetooth Device Watch: @BluetoothLowEnergyDevicesModel.DeviceWatchStop</div>
    }
    @if (!string.IsNullOrEmpty(BluetoothLowEnergyDevicesModel.DeviceEnumComplete))
    {

        <div>Bluetooth Device Complete: @BluetoothLowEnergyDevicesModel.DeviceEnumComplete</div>
    }
    @if (BluetoothLowEnergyDevicesModel.PairableDevices != null && BluetoothLowEnergyDevicesModel.PairableDevices.Any())
    {

        var thisResult = BluetoothLowEnergyDevicesModel.PairableDevices.Distinct().ToDictionary(x => x.Key);

        if (thisResult != null)
        {
            foreach (var item in thisResult.Distinct())
            {
                if (thisResult.ContainsValue(item.Value))
                {
                <div class="text-info mt-2">Device Address: @item.Key</div>
                    for (int i = 0; i < item.Value.Value.Count; i++)
                    {
                    <div class="text-info">Device Is Paired: @item.Value.Value[0]</div>

                    <div class="text-info">Device Can Pair: @item.Value.Value[1]</div>

                    <div class="text-info">Device Id: @item.Value.Value[2]</div>

                    <div class="text-info">Device Name: @(!string.IsNullOrEmpty(item.Value.Value[3]) ? item.Value.Value[3] : "No Name")</div>
                    }
                }
            }

        }

    }
    @if (BluetoothLowEnergyDevicesModel.DeviceInfo.Any() && !blePageCode.IsCheckedInfo)
    {

        //connecting a device
        foreach (var item in BluetoothLowEnergyDevicesModel.DeviceInfo)
        {
            if (!string.IsNullOrEmpty(item.Key.ToString()))
            {

                <div>Device Is Connected: @item.Key: @item.Value</div>
                blePageCode.IsCheckedInfo = true;

            }
        }
    }

    @*@if (!string.IsNullOrEmpty(BluetoothLowEnergyDevicesModel.BluetoothDId))
        {
            <div>Bluetooth Device ID: @BluetoothLowEnergyDevicesModel.BluetoothDId</div>
        }

        @if (IsCheckedInfo && !string.IsNullOrEmpty(BluetoothLowEnergyDevicesModel.DeviceIsPair))
        {
            <div>Pairing Status: @BluetoothLowEnergyDevicesModel.DeviceIsPair</div>
        }*@
    @if (!string.IsNullOrEmpty(BluetoothLowEnergyDevicesModel.DeviceIsConnected))
    {
        <div>Connection Status: @BluetoothLowEnergyDevicesModel.DeviceIsConnected</div>
    }
    @if (BluetoothLowEnergyDevicesModel.ServicesUUID.Any())
    {
        <h2>Services</h2>
        foreach (var item in BluetoothLowEnergyDevicesModel.ServicesUUID.Distinct().ToList())
        {
            <br />
            <button class="btn btn-primary" @onclick="() => blePageCode.ServiceClicked(item)">@item</button><br />

            if (blePageCode.ThisGuidService == item)
            {
                if (BluetoothLowEnergyDevicesModel.CharacteristicsUUID.Any())
                {
                    <h3>Characteristics</h3>

                    foreach (var bleChar in BluetoothLowEnergyDevicesModel.CharacteristicsUUID)
                    {
                        <button class="btn btn-info mt-2" @onclick="() => blePageCode.EvaluteCharac(bleChar)">@bleChar</button><br />

                        if (BluetoothLowEnergyDevicesModel.ThisGuidCharc == bleChar)
                        {
                            if (BluetoothLowEnergyDevicesModel.IsCharcReadable)
                            {
                                <div class="mt-2"><button class="btn btn-danger" @onclick="() => blePageCode.ReadCharac(bleChar)">Read <i class="bi bi-check"></i></button></div>
                            }
                            if (BluetoothLowEnergyDevicesModel.IsCharcNotify)
                            {
                                <div class="mt-2 mb-2"><button class="btn btn-danger" @onclick="() => blePageCode.NotifyCharac(bleChar)">Notify <i class="bi bi-check"></i></button></div>
                            }
                            if (BluetoothLowEnergyDevicesModel.IsCharcWritable)
                            {
                                <div class="mt-2 mb-2"><button class="btn btn-danger" @onclick="() => blePageCode.WriteCharac(bleChar)">Write <i class="bi bi-check"></i></button></div>
                            }
                            if (BluetoothLowEnergyDevicesModel.IsCharcWritableWithoutResponse)
                            {
                                <div class="mt-2 mb-2"><button class="btn btn-danger" @onclick="() => blePageCode.WriteWithoutResponseCharac(bleChar)">Write Without Response <i class="bi bi-check"></i></button></div>
                            }
                            else if (!BluetoothLowEnergyDevicesModel.IsCharcWritableWithoutResponse && !BluetoothLowEnergyDevicesModel.IsCharcWritable && !BluetoothLowEnergyDevicesModel.IsCharcReadable && !BluetoothLowEnergyDevicesModel.IsCharcNotify)
                            {
                                <div class="text-danger mt-2 mb-2">This Charcteristic has No Ability</div>
                            }
                        }
                    }
                }
                else
                {
                    <div class="text-secondary">No Characteristic</div>
                }
            }

        }
    }

</div>
@code {
    private BluetoothLowEnergyDevicesModel bluetoothLowEnergyDevicesModel = new BluetoothLowEnergyDevicesModel();
    
    private BluetoothWDevicesPageCode blePageCode = new BluetoothWDevicesPageCode();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await bluetoothLowEnergyDevicesModel.RunScanDevice();
        }
    }
    //    protected override async Task OnInitializedAsync()
    //{
    //    base.OnInitializedAsync();
    //    await bluetoothLowEnergyDevicesModel.RunScanDevice();
    //}

}