@page "/bumap"
@implements IAsyncDisposable
@inject IJSRuntime JS

<h2>User Map</h2>

<LoginRoute />

<div class="container bg-light border-2 border-dark rounded-2">

    <EditForm Model="@mapFunc.mapPlaces" OnValidSubmit="@mapFunc.FindPlace">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="pt-2 mt-4 mb-3">
            <label class="mt-3 mb-2">Address:</label>
            <InputText class="form-control" @bind-Value=mapFunc.mapPlaces.Name type="text" name="name" />
        </div>
        <button class="btn btn-danger" type="submit">Search</button>
    </EditForm>
</div>

<div class="bg-light m-auto" style="width: 800px; height: 500px;">
    <div class="w-75 m-auto h-100" @ref="mapFunc.mapElement"></div>
    <div class="row">
        <div class="col text-center">
            <button class="btn btn-primary mt-3" @onclick="() => mapFunc.MarkerPlace()">Place Marker</button>
        </div>

    </div>
    <div class="row">

        <div class="col text-center">
            <button class="btn btn-info mt-3" @onclick="() => mapFunc.ShowCurrentLocation()">Current Place</button>
        </div>
    </div>
    <div class="row">

        <div class="col text-center">
            <button class="btn btn-info mt-3" @onclick="() => mapFunc.AllMarkers()">Show Saved Places</button>
        </div>
    </div>
</div>

@if(mapFunc.UserAddress != null && mapFunc.UserAddress != ""){
<div>@mapFunc.UserAddress</div>
}
@code
{

    private MapFunctions mapFunc = new();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            mapFunc.mapModule = await JS.InvokeAsync<IJSObjectReference>(
            "import", "./_content/BoatRazorLibrary/mapInfo.js");
            mapFunc.mapInstance = await mapFunc.mapModule.InvokeAsync<IJSObjectReference>(
            "initialLocationAddMap", mapFunc.mapElement);
        }
    }


    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (mapFunc.mapInstance is not null)
        {
            await mapFunc.mapInstance.DisposeAsync();
        }

        if (mapFunc.mapModule is not null)
        {
            await mapFunc.mapModule.DisposeAsync();
        }
    }

}
