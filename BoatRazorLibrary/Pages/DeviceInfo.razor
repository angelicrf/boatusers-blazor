@page "/deviceinfo"
@using System.Text.Json
@inject IJSRuntime js
@implements IAsyncDisposable

<h3>DeviceInfo</h3>

@*<Button Type="@ButtonType.Primary">Click</Button>*@

@if (dvCode.IsMobile)
{
    <div class="m-auto">
        Mobile<DeviceMauiLocationComponent />
        @*<DatePicker TValue="DateTime?" Picker="@DatePickerType.Date" />*@
        @*<BluetoothDevicesInfo />*@
    </div>
}
else if (dvCode.IsDesktop)
{
    <div>Is Desktop</div>
    <div class="m-auto">
        <DeviceMauiLocationComponent />
        <BUDateSelectorComponent />
    </div>
}
else
{
    <div>Window App</div>
    if (dvCode.LocationObj != null)
    {
        <div>@dvCode.LocationLat @dvCode.LocationLon</div>
        <div>@dvCode.DeviceLoc</div>
    }
    if (!string.IsNullOrEmpty(dvCode.DeviceBatteryLevel))
    {
        <div>Device Battery Level: @dvCode.DeviceBatteryLevel</div>
    }
    if (!string.IsNullOrEmpty(dvCode.AppBrowserName))
    {
        <div>App Browser Name: @dvCode.AppBrowserName</div>
    }
    if (dvCode.DeviceNetworkInfoObj != null)
    {
        <div>Device Network Effective-Type: @dvCode.DNetworkEType  Device Effective Bandwidth Estimate: @dvCode.DNetworkDLink </div>
    }
    if (dvCode.IsDNameVersion)
    {
        <div>App Name: @dvCode.DAppName </div>
        <div>App Version: @dvCode.DAppVersion </div>
    }
}

@code
{
    private IJSObjectReference? funcModule;

    private IJSObjectReference? funcWModule;

    private DeviceInfoWCode dvCode = new DeviceInfoWCode();

    protected override async Task OnInitializedAsync()
    {
        funcModule = await js.InvokeAsync<IJSObjectReference>(
            "import", "./_content/BoatRazorLibrary/cartInfo.js");

        funcWModule = await js.InvokeAsync<IJSObjectReference>(
         "import", "./_content/BoatRazorLibrary/deviceLocation.js");

        dvCode.IsMobile = await funcModule.InvokeAsync<bool>("isDevice");

        dvCode.IsDesktop = await funcModule.InvokeAsync<bool>("isDesktop");


        if (!dvCode.IsDesktop && !dvCode.IsMobile)
        {
            dvCode.LocationObj = await funcWModule.InvokeAsync<object>("deviceLocationInfo");
            var LocationSerialize = JsonSerializer.Serialize(dvCode.LocationObj);

            var LocationDeserialize = JsonSerializer.Deserialize<DeviceLocationW>(LocationSerialize);

            dvCode.LocationLat = LocationDeserialize.LatCoordinate.ToString();

            dvCode.LocationLon = LocationDeserialize.LonCoordinate.ToString();

            dvCode.DeviceLoc = LocationDeserialize.DeviceAddress.ToString();

            dvCode.DeviceBatteryLevel = await funcWModule.InvokeAsync<string>("deviceBatterylevel");

            dvCode.AppBrowserName = await funcWModule.InvokeAsync<string>("deviceAgentInfo");

            dvCode.DeviceNetworkInfoObj = await funcWModule.InvokeAsync<object>("deviceNetworkInfo");

            var DNetworkSerialize = JsonSerializer.Serialize(dvCode.DeviceNetworkInfoObj);

            var DNetworkDeserialize = JsonSerializer.Deserialize<DeviceNetworkInfoModel>(DNetworkSerialize);

            dvCode.DNetworkEType = DNetworkDeserialize.DNetworkEffectiveType;

            dvCode.DNetworkDLink = DNetworkDeserialize.DNDownLink;

            var thisTuple = await dvCode.FindDName();

            var displayResult = await dvCode.GetTupleValues(thisTuple);

            dvCode.IsDNameVersion = await dvCode.GetDeviceVersion(displayResult);

        }
        //await js.InvokeAsync<string>("MyLib.displayDeviceName");

        StateHasChanged();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (funcModule is not null)
        {
            await funcModule.DisposeAsync();
        }
        if (funcWModule is not null)
        {
            await funcWModule.DisposeAsync();
        }
    }
}
