@page "/deviceinfo"
@using System.Text.Json
@inject IJSRuntime js
@implements IAsyncDisposable

<h3>DeviceInfo</h3>

@*<Button Type="@ButtonType.Primary">Click</Button>*@

@if (IsMobile)
{
    <div class="m-auto">
        Mobile<DeviceMauiLocationComponent />
        @*<DatePicker TValue="DateTime?" Picker="@DatePickerType.Date" />*@
        @*<BluetoothDevicesInfo />*@
    </div>
}
else if (IsDesktop)
{
    //Take Out The charger To see the result in telemetry in desktop app
    <div class="m-auto">
        <DeviceMauiLocationComponent />
        <BUDateSelectorComponent />
    </div>
}
else
{
    if (LocationObj != null)
    {
        <div>@LocationLat @LocationLon</div>
        <div>@DeviceLoc</div>
    }
    if (!string.IsNullOrEmpty(DeviceBatteryLevel))
    {
        <div>Device Battery Level: @DeviceBatteryLevel</div>
    }
    if (!string.IsNullOrEmpty(AppBrowserName))
    {
        <div>App Browser Name: @AppBrowserName</div>
    }
    if (DeviceNetworkInfoObj != null)
    {
        <div>Device Network Effective-Type: @DNetworkEType  Device Effective Bandwidth Estimate: @DNetworkDLink </div>
    }
    if (!string.IsNullOrEmpty(DAppName))
    {
        <div>App Name: @DAppName </div>
    }
}

@code
{


    private bool IsMobile { get; set; }

    private bool IsDesktop { get; set; }

    private object LocationObj { get; set; }

    private string LocationLat { get; set; }

    private string LocationLon { get; set; }

    private string DeviceLoc { get; set; }

    private string DeviceBatteryLevel { get; set; }

    private string AppBrowserName { get; set; }

    private object DeviceNetworkInfoObj { get; set; }

    private string DNetworkEType { get; set; }

    private string DNetworkDLink { get; set; }

    private string DAppName { get; set; }

    private IJSObjectReference? funcModule;

    private IJSObjectReference? funcWModule;

    protected override async Task OnInitializedAsync()
    {
        funcModule = await js.InvokeAsync<IJSObjectReference>(
            "import", "./_content/BoatRazorLibrary/cartInfo.js");

        funcWModule = await js.InvokeAsync<IJSObjectReference>(
         "import", "./_content/BoatRazorLibrary/deviceLocation.js");

        IsMobile = await funcModule.InvokeAsync<bool>("isDevice");

        IsDesktop = await funcModule.InvokeAsync<bool>("isDesktop");

        LocationObj = await funcWModule.InvokeAsync<object>("deviceLocationInfo");

        var LocationSerialize = JsonSerializer.Serialize(LocationObj);

        var LocationDeserialize = JsonSerializer.Deserialize<DeviceLocationW>(LocationSerialize);

        LocationLat = LocationDeserialize.LatCoordinate.ToString();

        LocationLon = LocationDeserialize.LonCoordinate.ToString();

        DeviceLoc = LocationDeserialize.DeviceAddress.ToString();

        DeviceBatteryLevel = await funcWModule.InvokeAsync<string>("deviceBatterylevel");

        AppBrowserName = await funcWModule.InvokeAsync<string>("deviceAgentInfo");

        DeviceNetworkInfoObj = await funcWModule.InvokeAsync<object>("deviceNetworkInfo");

        var DNetworkSerialize = JsonSerializer.Serialize(DeviceNetworkInfoObj);

        var DNetworkDeserialize = JsonSerializer.Deserialize<DeviceNetworkInfoModel>(DNetworkSerialize);

        DNetworkEType = DNetworkDeserialize.DNetworkEffectiveType;

        DNetworkDLink = DNetworkDeserialize.DNDownLink;

        DAppName = await funcWModule.InvokeAsync<string>("getApplicationName");

        StateHasChanged();
    }
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (funcModule is not null)
        {
            await funcModule.DisposeAsync();
        }
        if (funcWModule is not null)
        {
            await funcWModule.DisposeAsync();
        }
    }
}
