@page "/deviceinfo"
@using Newtonsoft.Json;
@inject IJSRuntime js
@implements IAsyncDisposable

<h3>DeviceInfo</h3>

@*<Button Type="@ButtonType.Primary">Click</Button>*@

@if (IsMobile)
{
    <div class="m-auto">
        <DeviceMauiLocationComponent />
        <DatePicker TValue="DateTime?" Picker="@DatePickerType.Date" />
        @*<BluetoothDevicesInfo />*@
    </div>
}
else
{

<div class="m-auto">
    <div>@UserLocationData.Latitude @UserLocationData.Longitude</div>
    <BUDateSelectorComponent />
</div>

}

@code
{

    private bool IsMobile { get; set; }

    DeviceSensors instance = new DeviceSensors();

    private object ThisObject { get; set; }

    private MauiDeviceLocationModel UserLocationData = new MauiDeviceLocationModel();

    private IJSObjectReference? funcModule;

    private string UserLocation { get; set; }

    FuncDeviceInfo funcDvi = new FuncDeviceInfo();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {

            funcModule = await js.InvokeAsync<IJSObjectReference>(
            "import", "./_content/BoatRazorLibrary/cartInfo.js");

            IsMobile = await funcModule.InvokeAsync<bool>("isDevice");

            ThisObject = await instance.GetCurrentLocation();

            var receiveLocation = await CallFunc();
            //if (receiveLocation)
            //{
            //    UserLocation = await instance.GetGeocodeReverseData(UserLocationData.Latitude, UserLocationData.Longitude);

            //}
            StateHasChanged();

        }

    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {

        if (funcModule is not null)
        {
            await funcModule.DisposeAsync();
        }
    }
    private Task<bool> CallFunc()
    {

        var UserDataString = JsonConvert.SerializeObject(ThisObject);
        UserLocationData = JsonConvert.DeserializeObject<MauiDeviceLocationModel>(UserDataString);
        if (UserLocationData?.Longitude != 0.2)
        {
            return Task.FromResult(true);
        }
        return Task.FromResult(false);

    }

}
